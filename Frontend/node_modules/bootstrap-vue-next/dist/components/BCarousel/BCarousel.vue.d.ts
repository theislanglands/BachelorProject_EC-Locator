import { BvCarouselEvent } from '../../utils';
declare const _sfc_main: import("vue").DefineComponent<{
    ride: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    noHoverPause: {
        type: null;
        required: false;
        default: boolean;
    };
    rideReverse: {
        type: null;
        required: false;
        default: boolean;
    };
    fade: {
        type: null;
        required: false;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    imgHeight: {
        type: StringConstructor;
        required: false;
    };
    imgWidth: {
        type: StringConstructor;
        required: false;
    };
    background: {
        type: StringConstructor;
        required: false;
    };
    modelValue: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    controls: {
        type: null;
        required: false;
        default: boolean;
    };
    indicators: {
        type: null;
        required: false;
        default: boolean;
    };
    interval: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    noTouch: {
        type: null;
        required: false;
        default: boolean;
    };
    noWrap: {
        type: null;
        required: false;
        default: boolean;
    };
    controlsPrevText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    controlsNextText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    indicatorsButtonLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    keyboard: {
        type: null;
        required: false;
        default: boolean;
    };
}, {
    props: any;
    emit: {
        (e: 'slid', value: BvCarouselEvent): void;
        (e: 'slide', value: BvCarouselEvent): void;
        (e: 'update:modelValue', value: number): void;
    };
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    computedId: import("vue").ComputedRef<string>;
    keyboardBoolean: Readonly<import("vue").Ref<boolean>>;
    rideReverseBoolean: Readonly<import("vue").Ref<boolean>>;
    noHoverPauseBoolean: Readonly<import("vue").Ref<boolean>>;
    fadeBoolean: Readonly<import("vue").Ref<boolean>>;
    controlsBoolean: Readonly<import("vue").Ref<boolean>>;
    indicatorsBoolean: Readonly<import("vue").Ref<boolean>>;
    noTouchBoolean: Readonly<import("vue").Ref<boolean>>;
    noWrapBoolean: Readonly<import("vue").Ref<boolean>>;
    xDown: number | null;
    yDown: number | null;
    isTransitioning: import("vue").Ref<boolean>;
    rideStarted: import("vue").Ref<boolean>;
    direction: import("vue").Ref<boolean>;
    relatedTarget: import("vue").Ref<HTMLElement | null>;
    target: import("vue").Ref<HTMLElement | null>;
    rideResolved: import("vue").ComputedRef<boolean | "carousel">;
    pause: import("@vueuse/shared").Fn;
    resume: import("@vueuse/shared").Fn;
    isRiding: import("vue").ComputedRef<boolean>;
    slides: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    computedClasses: import("vue").ComputedRef<(string | {
        'carousel-fade': boolean;
    })[]>;
    buildBvCarouselEvent: (event: 'slid' | 'slide', from: number) => BvCarouselEvent;
    goToValue: (value: number) => void;
    prev: () => void;
    next: () => void;
    onKeydown: (fn: () => void) => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    onTouchStart: (e: TouchEvent) => void;
    onTouchEnd: (e: TouchEvent) => void;
    onBeforeLeave: (i: number) => void;
    onAfterLeave: (i: number) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "slid" | "slide")[], "update:modelValue" | "slid" | "slide", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ride: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    noHoverPause: {
        type: null;
        required: false;
        default: boolean;
    };
    rideReverse: {
        type: null;
        required: false;
        default: boolean;
    };
    fade: {
        type: null;
        required: false;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    imgHeight: {
        type: StringConstructor;
        required: false;
    };
    imgWidth: {
        type: StringConstructor;
        required: false;
    };
    background: {
        type: StringConstructor;
        required: false;
    };
    modelValue: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    controls: {
        type: null;
        required: false;
        default: boolean;
    };
    indicators: {
        type: null;
        required: false;
        default: boolean;
    };
    interval: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    noTouch: {
        type: null;
        required: false;
        default: boolean;
    };
    noWrap: {
        type: null;
        required: false;
        default: boolean;
    };
    controlsPrevText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    controlsNextText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    indicatorsButtonLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    keyboard: {
        type: null;
        required: false;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSlide?: ((...args: any[]) => any) | undefined;
    onSlid?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    noHoverPause: any;
    fade: any;
    interval: number;
    ride: string | boolean;
    rideReverse: any;
    controls: any;
    indicators: any;
    noTouch: any;
    noWrap: any;
    controlsPrevText: string;
    controlsNextText: string;
    indicatorsButtonLabel: string;
    keyboard: any;
}>;
export default _sfc_main;
