using EC_locator.Core.Interfaces;
using Microsoft.Graph;
using Message = EC_locator.Core.Models.Message;

namespace EC_locator.Repositories;

public class TeamsRepositoryLocal : ITeamsRepository

{
    public async Task<List<User>> GetUsersAsync()
    {
        List <User> users = new()
        {
            new User {DisplayName = "Anders Wind", Id = "2cf3e351-6ca8-4fda-999c-14a8b048b899"},
            new User {DisplayName = "Andreas Widtfeldt Trolle", Id = "2a6f1d7f-d155-40e7-b2db-e4723ea77c0f"},
            new User {DisplayName = "Brian U. B. Daugaard", Id = "2d3cfcdf-542d-43f5-a4b1-6f58387604eb"},
            new User {DisplayName = "Theis Langlands", Id = "6e5ee9cb-11cb-405d-aaa8-60c3768340c3"}
        };

        return users;
    }

    public async Task<List<Message>?> GetRecentMessagesAsync(string employeeId)
    {
        var samples = GetSamples("wip");

        if (samples.Length == 0)
        {
            // Select random messaage
            var msg = await FetchAllMessagesAsync(DateOnly.FromDateTime(DateTime.Now), new DateOnly());
            int randomIndex = new Random().Next(0, msg.Count);
            return new List<Message> { msg[randomIndex] };
        }
        
        List<Message> messages = new();
        
        int i = 1;
        foreach (var sample in samples)
        {
            messages.Add(new Message(sample, employeeId, DateTime.Now.AddMinutes(i), new List<Message>()));
            i++;
        }

        if (messages.Count == 0)
        {
            return null;
        }

        return messages;
    }

    public async Task<List<Message>> FetchAllMessagesAsync(DateOnly fromDate, DateOnly toDate)
    {
        var sampleCode = "all";
        List<Message> messages = new();
        var samples = GetSamples(sampleCode);
        int i = 1;
        foreach (var sample in samples)
        {
            messages.Add(new Message(sample, "Test employeeId", fromDate.ToDateTime(new TimeOnly(10,0)).AddMinutes(i), new List<Message>()));
            i++;
        }

        if (messages.Count == 0)
        {
            return null;
        }

        return messages;
    }
    
    
    private string[] GetSamples(string employeeId)
    {
        if (employeeId.Equals("wip"))
        {
            string[] messages =
            {
            };
            return messages;
        }
        
        if (employeeId.Equals("all"))
        {
            var concatenatedMessages = this.GetSamples("sample1").ToList();
            concatenatedMessages.AddRange(this.GetSamples("sample3").ToList());
            concatenatedMessages.AddRange(this.GetSamples("ill").ToList());
            concatenatedMessages.AddRange(this.GetSamples("is_first_location_office").ToList());
            concatenatedMessages.AddRange(this.GetSamples("minute indicators").ToList());
            concatenatedMessages.AddRange(this.GetSamples("startKeywords").ToList());
            concatenatedMessages.AddRange(this.GetSamples("stopKeywords").ToList());
            concatenatedMessages.AddRange(this.GetSamples("negation").ToList());
            concatenatedMessages.AddRange(this.GetSamples("undefined").ToList());
            
            return concatenatedMessages.ToArray();
        }

        if (employeeId.Equals("sample1"))
        {
            string[] messages =
            {
                "Jeg er p√• hjemmefra i dag",
                "Godmorgen. Jeg er p√• hjemmekontoret idag",
                "Morn - det bliver endnu en dag p√• hjemmekontoret - dels pga. bent√∏jet og dels for at f√• ro til at forberede Popermo til n√¶ste uge",
                "Jeg er p√• hjemmefra i dag.",
                "Morn. Jeg er ved Popermo i dag",
            };
            return messages;
        }

        if (employeeId.Equals("sample2"))
        {
            // hjemmefra og kontor - tilf√∏jet til test!
            string[] messages =
            {
                "Jeg bliver hjemme indtil jeg kan aflevere min cykel til service klokken 10, og s√• kommer jeg ind.",
                "Jeg smutter til tandl√¶ge her klokken 12. Arbejder muligvis hjemmefra efter.",
                "Jeg tager lige en time mere fra hjemmekontoret. Er inde ca. kl 10",
                "Kommer ind p√• kontoret omkring kl. 11",
                "Godmorgen, jeg starter ud hjemme og kommer ind omkring kl 10",
                // off - home - office - 11_15 = > delete off

                "Godmorgen. Jeg starter hjemme, men forventer at v√¶re p√• kontoret kl 10. Vi ses ‚úå",
                // off - home - office - 10 = > delete off

                "Er inde 9:15",
                "Jeg er p√• kontoret cirka 09.30",
                "Er hjemmefra med Otto indtil backup kommer Jeg er inde inden frokost",
                "0920", // home 9- office start 920 -> time with no location => insert office
            };
            return messages;
        }

        if (employeeId.Equals("sample3"))
        {
            // Diverse - Meeting, Undefined
            string[] messages =
            {
                "Thomas, Gorm og jeg tager ned til N√∏rgaard Mikkelsen til m√∏de, forventer at v√¶re retur 10.30",
                "Starter til m√∏de hos NM. Er tilbage lidt over 10.",
                // off - meeting - Office - 11_15 = > delete off

                "Morn - jeg starter hos l√¶gen og k√∏rer p√• Popermo efterf√∏lgende",
                // off - remote - No-time!

                "Er til m√∏de ved Alumeco indtil 11.30 i morgen og arbejder hjemme fra derefter.",
                "Jeg tager hjem og arbejder efter zoo m√∏det  Hovedet driller lidt i dag. ",
                "Jeg er i N√∏rresundby hele dagen i morgen hos Continia sammen med Martin, Simone og Jesper",
            };
            return messages;
        }

        if (employeeId.Equals("ill"))
        {
            // syg & b√∏rn syge - Tilf√∏jet til unit test
            string[] messages =
            {
                "tager en dag under dynen",
                "Er hjemme med syge piger, s√• er lidt on/off hele dagen",
                "Jeg har krammet toilettet hele natten, s√• jeg er hjemme, og sover forh√•bentligt",
                "Er ikke p√• toppen - Er on/off i dag",
                "Stadig ikke p√• toppen, men arbejder det jeg kan",
                "Er helt smadret - bliver under dynen, og ser om jeg kan arbejde senere",
                "Jeg er slet ikke p√• toppen, s√• jeg bliver hjemme i dag",
                "jeg er syg i dag",
                "Det er som om min fork√∏lelse er blusset op igen, s√• jeg er nok f√∏rst p√• senere.",

                "Den lille er stadigv√¶k syg, arbejde det jeg kan ind i mellem",
                "Felix er desv√¶rre syg med feber s√• tager den hjemmefra, s√• meget det er muligt ü§í",
                "Otto er desv√¶rre blevet syg, s√• jeg holder hjemmefronten indtil backup ankommer. Er p√• kontoret inden 11", // Syg, men p√• kontoret
                "Jeg tager en fridag i dag med Viggo p√• sygehuset, er p√• telefonen hvis der er noget",
                "Jeg gennemg√•r lige nogle √∏v ting her for tiden, med en masse l√¶gebes√∏g og smerter. S√• jeg er ikke lige s√• aktiv p√• kontoret de dage her."

                
            };
            return messages;
        }

        if (employeeId.Equals("is_first_location_office"))
        {
            // tilf√∏jet til test
            string[] messages =
            {
                "0930 p√• kontoret"
            };
            return messages;
        }

        if (employeeId.Equals("minute indicators"))
        {
            // tilf√∏jet til test
            string[] messages =
            {
                "Vejret gjorde lige det helt lidt mere b√∏vlet her til morgen. Jeg er inde omkring kvart over 9...",
                "Godmorgen, jeg har ikke rigtig sovet pga maven, ser om jeg ka f√• indhentet lidt s√∏vn her til formiddag. Er p√• hjemmefra senest ved middagstid",

            };
            return messages;
        }

        if (employeeId.Equals("startKeywords"))
        {
            // tilf√∏jet til test
            string[] messages =
            {
                "Jeg starter lige hjemme og er p√• kontoret til frokost",
                // off - home - Office - 11_15
                "Jeg starter ud hjemme 9.30 og er p√• kontoret til frokost",
                // off - home - 9:30 - Office - 11_15

                // hvis off er efterfulgt af to locations uden en time => delete
            };
            return messages;
        }

        if (employeeId.Equals("stopKeywords"))
        {
            // tilf√∏jet til test
            string[] messages =
            {
                "I morgen arbejder jeg hjemmefra og stopper 11.30",
                "Arbejder hjemme i dag og g√•r fra ved frokosttid. God p√•ske ",
                "Jeg holder weekend ved 14 tiden God p√•ske til jer der g√•r p√• ferie",
                "Lukker ned kl. 14"
            };
            return messages;
        }

        if (employeeId.Equals("negation"))
        {
            // added to test
            string[] messages =
            {
                "Kommer ikke p√• kontoret", // ikke negering
            };
            return messages;
        }

        if (employeeId.Equals("undefined"))
        {
            // added to test
            string[] messages =
            {
                "prut fis kanon",
                "Morn - jeg er startet hjemmefra og k√∏rer p√• Popermo efterf√∏lgende. God weekend til alle jeg ikke n√•r at hilse p√• "
            };
            return messages;
        }

        if (employeeId.Equals("tomorrow"))
        {
            // added to test
            string[] messages =
            {
                "Jeg er p√• hjemmefra i morgen.",
                "Jeg er f√∏rst p√• kontoret omkring kl 10 i morgen",
            };
            return messages;
        }

        // SE P√Ö DEM HER!
        if (employeeId.Equals("outliers"))
        {
            string[] messages =
            {
                "Jeg d√∏jer stadig med √∏jenmigr√¶ne hvilket g√∏r at det sl√∏rer for mine √∏jne. Der er gode og d√•rlige timer. Jeg h√•ber at komme ind p√• kontoret til formiddag",
                "Jeg holder for i dag", // HOLDER = holder fri fra time=now -> location "home" fra NU af!
                "Jeg er p√• kontoret inden frokost. Er p√• hjemmefra", // omvendt r√¶kkef√∏lge - kan ikke h√•ndtere -> false prediction
                "Jeg tager lige en time eller to hjemmefra, her til morgen", // utvetydig -> kan ikke finde kontor
                "Lynet skal lige have en gang service, s√• er f√∏rst p√• pinden 9.15-9.30", // kan ikke specificere tidspunkt - to tidspunkter efter hinanden - slet f√∏rste?
                "Otto er desv√¶rre blevet syg, s√• jeg holder hjemmefronten indtil backup ankommer. Er p√• kontoret inden 11", // Syg, men p√• kontoret
                "Jeg er forresten stadig p√• hjemmefra - er m√•ske p√• kontoret en af de kommende dage", // -> undefined no time keyword - Maybe "Future" keywords!
            };
            return messages;
        }

        if (employeeId.Equals("un-precise"))
        {
            string[] messages =
            {
                "Skal lige hente Noah og k√∏re ham ud til de gamle. Han har lidt ondt i maven. Kommer p√• konnes igen efter.",
            };
            return messages;
        }

        return null;
    }
}